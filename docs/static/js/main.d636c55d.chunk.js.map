{"version":3,"sources":["logo.svg","die.js","roller.js","totalScore.js","scoretable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Die","this","diceNumberInput","value","_this","react_default","a","createElement","className","props","size","name","type","placeholder","ref","input","React","Component","Roller","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","bind","assertThisInitialized","event","preventDefault","handleRoll","4","d4","getValue","6","d6","8","d8","10","d10","12","d12","20","d20","100","d100","_this2","die","TotalScore","totalThrowArray","throwArray","reduce","partial_sum","Scoretable","id","map","item","index","sidesNumber","key","totalScore","App","state","rolls","keys","forEach","rollNumber","parseInt","isNaN","i","result","Math","floor","random","push","console","log","setState","roller","scoretable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCwBzBC,kMAnBX,OAAOC,KAAKC,gBAAgBC,uCAGrB,IAAAC,EAAAH,KACP,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAjB,cAAwCP,KAAKQ,MAAMC,KAAnD,WACAL,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACVG,KAAK,aACLC,KAAK,OACLC,YAAY,IACZC,IAAK,SAACC,GAAD,OAAWX,EAAKF,gBAAkBa,aAf/BC,IAAMC,YC0CTC,cAxCb,SAAAA,EAAYT,GAAM,IAAAL,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAlB,KAAAiB,IAChBd,EAAAe,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAtB,KAAMQ,KACDe,SAAWpB,EAAKoB,SAASC,KAAdN,OAAAO,EAAA,EAAAP,CAAAf,IAFAA,wEAKTuB,GACPA,EAAMC,iBACN3B,KAAKQ,MAAMoB,WAAW,CACpBC,EAAG7B,KAAK8B,GAAGC,WACXC,EAAGhC,KAAKiC,GAAGF,WACXG,EAAGlC,KAAKmC,GAAGJ,WACXK,GAAIpC,KAAKqC,IAAIN,WACbO,GAAItC,KAAKuC,IAAIR,WACbS,GAAIxC,KAAKyC,IAAIV,WACbW,IAAK1C,KAAK2C,KAAKZ,8CAIV,IAAAa,EAAA5C,KACP,OACEI,EAAAC,EAAAC,cAAA,QAAMiB,SAAUvB,KAAKuB,UACnBnB,EAAAC,EAAAC,cAAA,YAAUC,UAAU,aAClBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,kBACEH,EAAAC,EAAAC,cAACuC,EAAD,CAAKpC,KAAM,EAAGI,IAAK,SAACC,GAAD,OAAW8B,EAAKd,GAAKhB,KACxCV,EAAAC,EAAAC,cAACuC,EAAD,CAAKpC,KAAM,EAAGI,IAAK,SAACC,GAAD,OAAW8B,EAAKX,GAAKnB,KACxCV,EAAAC,EAAAC,cAACuC,EAAD,CAAKpC,KAAM,EAAGI,IAAK,SAACC,GAAD,OAAW8B,EAAKT,GAAKrB,KACxCV,EAAAC,EAAAC,cAACuC,EAAD,CAAKpC,KAAM,GAAII,IAAK,SAACC,GAAD,OAAW8B,EAAKP,IAAMvB,KAC1CV,EAAAC,EAAAC,cAACuC,EAAD,CAAKpC,KAAM,GAAII,IAAK,SAACC,GAAD,OAAW8B,EAAKL,IAAMzB,KAC1CV,EAAAC,EAAAC,cAACuC,EAAD,CAAKpC,KAAM,GAAII,IAAK,SAACC,GAAD,OAAW8B,EAAKH,IAAM3B,KAC1CV,EAAAC,EAAAC,cAACuC,EAAD,CAAKpC,KAAM,IAAKI,IAAK,SAACC,GAAD,OAAW8B,EAAKD,KAAO7B,KAC9CV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeI,KAAK,UAAtC,UACAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcI,KAAK,SAArC,kBAhCWI,IAAMC,WCQZ8B,mLAPX,IAAMC,EAAkB/C,KAAKQ,MAAMwC,WAAWC,OAAO,SAACC,EAAa7C,GAAd,OAAoB6C,EAAc7C,EAAEH,OAAO,GAChG,OACEE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,gBAAwCwC,UAJrBhC,IAAMC,WC0BhBmC,mLAvBX,OACE/C,EAAAC,EAAAC,cAAA,OAAK8C,GAAG,cAAc7C,UAAU,cAC9BH,EAAAC,EAAAC,cAAA,WACGN,KAAKQ,MAAMwC,WAAWK,IAAI,SAACC,EAAMC,GAChC,IAAMC,EAAcF,EAAKE,YACnBtD,EAAQoD,EAAKpD,MACjB,OAAIA,IAAUsD,EACJpD,EAAAC,EAAAC,cAAA,KAAGmD,IAAKF,EAAOhD,UAAU,iBAAzB,eAAsDL,EAAtD,SAAmEsD,EAAnE,cACW,IAAVtD,EACDE,EAAAC,EAAAC,cAAA,KAAGmD,IAAKF,EAAOhD,UAAU,eAAzB,sBAA2DiD,EAA3D,cAEApD,EAAAC,EAAAC,cAAA,KAAGmD,IAAKF,EAAOhD,UAAU,YAAzB,eAAiDL,EAAjD,SAA8DsD,EAA9D,iBAIhBpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACoD,EAAD,CAAYV,WAAYhD,KAAKQ,MAAMwC,sBAlBpBjC,IAAMC,WCgDhB2C,cA3Cb,SAAAA,EAAYnD,GAAO,IAAAL,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAlB,KAAA2D,IACjBxD,EAAAe,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAyC,GAAArC,KAAAtB,KAAMQ,KACDoB,WAAazB,EAAKyB,WAAWJ,KAAhBN,OAAAO,EAAA,EAAAP,CAAAf,IAClBA,EAAKyD,MAAQ,CACXZ,WAAY,GACZQ,YAAa,GALErD,0EASR0D,GACT,IAAIb,EAAa,GACjB9B,OAAO4C,KAAKD,GAAOE,QAAQ,SAAAP,GACzB,IAAMQ,EAAaC,SAASJ,EAAML,GAAc,IAEhD,GADAA,EAAcS,SAAST,EAAa,KAC/BU,MAAMF,KAAiBE,MAAMV,GAChC,IAAK,IAAIW,EAAI,EAAGA,EAAIH,EAAYG,IAAK,CACnC,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAWf,EAAc,GACtDR,EAAWwB,KAAK,CACdhB,YAAaA,EACbtD,MAAOkE,OAKfK,QAAQC,IAAI1B,GACZhD,KAAK2E,SAAS,CAAC3B,WAAYA,EAAYQ,YAAa,qCAIpD,OACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEbH,EAAAC,EAAAC,cAACsE,EAAD,CAAQhD,WAAY5B,KAAK4B,aACzBxB,EAAAC,EAAAC,cAACuE,EAAD,CAAY7B,WAAYhD,KAAK4D,MAAMZ,WAAYQ,YAAaxD,KAAK4D,MAAMJ,uBArC/DzC,IAAMC,WCMJ8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d636c55d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Die extends React.Component {\n\n  getValue() {\n    return this.diceNumberInput.value;\n  }\n\n  render() {\n    return (\n      <div>\n        <label className=\"formText\">Number of D{this.props.size} rolled</label>\n        <input\n          className=\"formText\"\n          name=\"diceNumber\"\n          type=\"text\"\n          placeholder=\"0\"\n          ref={(input) => this.diceNumberInput = input}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Die;\n","import React from 'react';\nimport Die from './die';\n\nclass Roller extends React.Component {\n  constructor(props){\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    this.props.handleRoll({\n      4: this.d4.getValue(),\n      6: this.d6.getValue(),\n      8: this.d8.getValue(),\n      10: this.d10.getValue(),\n      12: this.d12.getValue(),\n      20: this.d20.getValue(),\n      100: this.d100.getValue()\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <fieldset className=\"formStyle\">\n          <legend className=\"legendText\">Roll your dice</legend>\n            <Die size={4} ref={(input) => this.d4 = input}/>\n            <Die size={6} ref={(input) => this.d6 = input} />\n            <Die size={8} ref={(input) => this.d8 = input} />\n            <Die size={10} ref={(input) => this.d10 = input} />\n            <Die size={12} ref={(input) => this.d12 = input} />\n            <Die size={20} ref={(input) => this.d20 = input} />\n            <Die size={100} ref={(input) => this.d100 = input} />\n          <button className=\"submitButton\" type=\"submit\">Submit</button>\n          <button className=\"resetButton\" type=\"reset\">Reset</button>\n        </fieldset>\n      </form>\n    );\n  }\n}\n\n\n\nexport default Roller;\n","import React from 'react';\n\nclass TotalScore extends React.Component {\n  render() {\n    const totalThrowArray = this.props.throwArray.reduce((partial_sum, a) => partial_sum + a.value, 0);\n    return (\n      <p className=\"totalScore\">Total score: {totalThrowArray}</p>\n    )\n  }\n}\n\nexport default TotalScore;\n","import React from 'react';\nimport TotalScore from './totalScore';\n\nclass Scoretable extends React.Component {\n  render() {\n    return (\n      <div id=\"bitsToClear\" className=\"scoreTable\">\n        <div>\n          {this.props.throwArray.map((item, index) => {\n            const sidesNumber = item.sidesNumber;\n            const value = item.value;\n              if (value === sidesNumber) {\n                return (<p key={index} className=\"newThrowGreen\">You threw a {value} on a {sidesNumber}-sided die</p>);\n              } else if (value === 1) {\n                return (<p key={index} className=\"newThrowRed\">You threw a 1 on a {sidesNumber}-sided die</p>);\n              } else {\n                return (<p key={index} className=\"newThrow\">You threw a {value} on a {sidesNumber}-sided die</p>);\n              }\n            })}\n        </div>\n        <div className=\"totalScore\">\n          <TotalScore throwArray={this.props.throwArray}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scoretable;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Roller from './roller';\nimport Scoretable from './scoretable';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleRoll = this.handleRoll.bind(this);\n    this.state = {\n      throwArray: [],\n      sidesNumber: 0\n    };\n  }\n\n  handleRoll(rolls) {\n    let throwArray = [];\n    Object.keys(rolls).forEach(sidesNumber => {\n      const rollNumber = parseInt(rolls[sidesNumber], 10);\n      sidesNumber = parseInt(sidesNumber, 10);\n      if (!isNaN(rollNumber) && (!isNaN(sidesNumber)) ) {\n        for (let i = 0; i < rollNumber; i++) {\n          let result = Math.floor(Math.random() * sidesNumber + 1);\n          throwArray.push({\n            sidesNumber: sidesNumber,\n            value: result\n          });\n        }\n      }\n    })\n    console.log(throwArray);\n    this.setState({throwArray: throwArray, sidesNumber: 0});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Dice Throw Calculator</h1>\n        <div className=\"parentContainer\">\n\n          <Roller handleRoll={this.handleRoll}/>\n          <Scoretable throwArray={this.state.throwArray} sidesNumber={this.state.sidesNumber} />\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}